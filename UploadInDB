
from pyspatialite import dbapi2 as sqlite3
from qgis.core import *
import qgis.core
import csv
import sys


""" Create a new SpatiaLiteDB from .csv (or .dbf) """

# set directory
sys.path.append("/home/xander/workspace/Freewat/")
filePath = '/home/xander/workspace/Freewat/'
workingDir = '/home/xander/workspace/Freewat/'

fileName = '/home/xander/workspace/Freewat/modelTable.csv'
DBname = 'DB_model'
tableName = 'modelTable'
fieldsName = ['name', 'type', 'length_unit', 'time_unit', 'child', 'working_directory']

# Create new SQL table
SQLstring = 'CREATE TABLE "modelTable" ("modelname" varchar(20), "modeltype" varchar(20),' \
            '"lengthUnit" double, "timeUnit" double, "isChild" varchar(99), ' \
            '"workingDir" varchar(100));'
# Create new SQL table from a .dbf (virtual first and real after)
# SQLstring = 'CREATE VIRTUAL TABLE virt_tbl USING VirtualDbf(*.dbf, UTF-8);'
# SQLstring = 'CREATE TABLE tbl AS SELECT * FROM virt_tbl;'
DBname = filePath + DBname + ".sqlite"

# creating/connecting SQL database object
con = sqlite3.connect(DBname)
# con = sqlite3.connect(":memory:") if you want write it in RAM
con.enable_load_extension(True)
cur = con.cursor()

# Initialise spatial db
# Insert a control for existing table or not
cur.execute("SELECT InitSpatialMetaData();")

modelname = 'cangu'
modeltype = 'modflow'  # 'sewat'

lengthString = 'ft'
timeString = 'day'
isChild = 0

if lengthString == 'undefined':
    lengthUnit = 0
elif lengthString == 'ft':
    lengthUnit = 1
elif lengthString == 'm':
    lengthUnit = 2
elif lengthString == 'cm':
    lengthUnit = 3

if timeString == 'undefined':
    timeUnit = 0
elif timeString == 'sec':
    timeUnit = 1
elif timeString == 'min':
    timeUnit = 2
elif timeString == 'hour':
    timeUnit = 3
elif timeString == 'day':
    timeUnit = 4
elif timeString == 'year':
    timeUnit = 5

# Create Model Table, or update if it exits
parameters = [modelname, modeltype, lengthUnit, timeUnit, isChild, workingDir]
nameTable = "modelTable"

# Check if table exists:
tablelayer = getVectorLayerByName(nameTable)
if tablelayer == None:
    # Create table
    fields = QgsFields()
    fields.append(QgsField("name", QVariant.String))
    fields.append(QgsField("type", QVariant.String))
    fields.append(QgsField("length_unit", QVariant.Int))
    fields.append(QgsField("time_unit", QVariant.Int))
    fields.append(QgsField("child", QVariant.Int))
    fields.append(QgsField("working_directory", QVariant.String))
    tableFile = filePath + nameTable + '.csv'

    writer = QgsVectorFileWriter(tableFile, "CP1250", fields, QGis.WKBPoint, None, "CSV")
    del writer
    tablelayer = QgsVectorLayer(tableFile, nameTable, "ogr")
else:
    fields = tablelayer.pendingFields()

# Add features related to the new model layer
dp = tablelayer.dataProvider()
ft = QgsFeature(fields)
for i in range(0, len(parameters)):
    ft[i] = parameters[i]

dp.addFeatures([ft])

# Add table to map
QgsMapLayerRegistry.instance().addMapLayer(tablelayer)


# Creating a Cursor
# Insert control if table already exist
cur.execute(SQLstring)
f = open(fileName)
csv_reader = csv.reader(f, delimiter=';')

for field1, field2, field3, field4, field5, field6 in csv_reader:
    cur.execute('INSERT INTO modelTable (name,type,length_unit,time_unit,child,working_directory) '
                'VALUES (?, ?, ?, ?, ?, ?);', (field1, field2, field3, field4, field5, field6))

# Initializing Spatial MetaData: GEOMETRY_COLUMNS and SPATIAL_REF_SYS
sql = 'SELECT InitSpatialMetadata()'
cur.execute(sql)

cur.close()
# Save the changes
con.commit()
# Close connection
con.close()
f.close()


""" Upload shapefile or layer (QgsMapLayer) (optionally only selected values ) into the DB,
        in tableName (string) with desired SRID (default layer srid if None). """

srid = None
selected = False
mapinfo = True

vlayer = qgis.utils.iface.mapCanvas().currentLayer()

# Get layers
selected = []
if selected == True:
    if vlayer.selectedFeatureCount() == 0:  # The number of features that are selected in this layer
        pop_up_info("No selected item in QGis layer: %s)" % vlayer.name())
#    return False
    select = vlayer.selectedFeaturesIds()  # Return reference to identifiers of selected features

# import shapeFile or vectorLayer to SpatiaLite using QgsVectorFileWriter
app = QgsApplication(sys.argv, False)  # QGIS crash ???

# need to locate .spatialite
app.setPkgDataPath('/home/xander/workspace/Freewat/')

# need to locate qgis libraries
app.setPrefixPath('/usr/local')

# need to locate c++ plugins (*.so)
app.setPluginPath('')
app.initQgis()

# show the environment variables
# print 'lib path:', app.libraryPath()
# print 'plugin path:', app.pluginPath()
# print 'srs.db:', app.srsDbFilePath()

# load a vector layer
# vlayer = QgsVectorLayer('.shp', 'layer_name_you_like', 'ogr')
# if not vlayer.isValid():
#     print "Layer failed to load!"

# get a vector layer
vlayer = qgis.utils.iface.mapCanvas().currentLayer()
crs = vlayer.crs()
if not crs.isValid():
    # choose a 4326 - WGS84 CRS
    crs = QgsCoordinateReferenceSystem(4326, QgsCoordinateReferenceSystem.EpsgCrsId)

error = QgsVectorFileWriter.writeAsVectorFormat(vlayer, 'DB_model.sqlite', 'System', crs, 'SQLite', False, None, ["SPATIALITE=YES"])
if error != QgsVectorFileWriter.NoError:
    print 'Error number:', error

# read shapefile layer
driver = vlayer.GetDriverByName('ESRI Shapefile')
dataSource = driver.Open(".shp", 0)  # 0 means read-only, 1 means writeable
layer = dataSource.GetLayer()

# import shapefile
inputFile = shapefile.Reader(".shp")
layers = [layer for layer in layer.list if layer.name() in layer]
# geometries and attributes of the layer
shapes = input.shapes()
attributes = input.records()

tableName = 'modelTable'
# Create name for table if not provided by user
if tableName in (None, ''):
    tableName = layer.name()

# Verify if tableName already exists in DB
# ExistingNames = [table.name for table in tables]

# Get data charset
provider = layer.dataProvider()
charset = provider.encoding()

# Get fields with corresponding types
fields = []
fieldsNames = []
mapinfoDAte = []
for id, name in enumerate(provider.fields().toList()):
    fieldName = unicode(name.name()).replace("'", " ").replace('"', " ")
    # Avoid two cols with same name:
    while fieldName.upper() in fieldsNames:
        fieldName = '%s_2' % fieldName
    fieldType = name.type()
    fieldTypeName = unicode(name.typeName()).upper()
    # MapInfo DATE compatibility
    if fieldTypeName == 'DATE' and unicode(provider.storageType()).lower() == u'mapinfo file'and mapinfo == True:  
        fieldType = 'DATE'
        mapinfoDAte.append([id, fieldName])  # Stock id and name of DATE field for MapInfo layers
    elif fieldType in (QtCore.QVariant.Char, QtCore.QVariant.String):  # Field type is TEXT
        fieldLength = name.length()
        fieldType = 'TEXT(%s)' % fieldLength  # Add field Length Information
    elif fieldType in (QtCore.QVariant.Bool, QtCore.QVariant.Int, QtCore.QVariant.LongLong, QtCore.QVariant.UInt, 
                       QtCore.QVariant.ULongLong):  # Field type is INTEGER
        fieldType = 'INTEGER'
    elif fieldType == QtCore.QVariant.Double:  # Field type is DOUBLE
        fieldType = 'REAL'
    else:  # Field type is not recognized by SQLITE
        fieldType = fieldTypeName
    fields.append(""" "%s" %s """ % (fieldName, fieldType))
    fieldsNames.append(fieldName.upper())

# Is it a geometric table ?
geometry = False
if layer.hasGeometryType():
    # Get geometry type
    geom = ['MULTIPOINT', 'MULTILINESTRING', 'MULTIPOLYGON', 'UnknownGeometry']
    geometry = geom[layer.geometryType()]
    # Project to new SRID if specified by user:
    if srid == None:
        srid = layer.crs().postgisSrid()
    else:
        Qsrid = QgsCoordinateReferenceSystem()  # Default constructor to storing a coordinate reference system
        Qsrid.createFromId(srid)
        if not Qsrid.isValid():  # Check if crs is ok
            pop_up_error("Destination SRID isn't valid for table %s" % layer.name())
#            return False
        layer.setCrs(Qsrid)

# Select attributes to import (remove PKUID if already exists):
allAttrib = provider.attributeIndexes()
fieldDesc = provider.fieldNameIndex("PKUID")
if fieldDesc != -1:
    print "PKUID already exists and will be replaced!"
    del allAttrib[fieldDesc]  # remove PKUID Field
    del fields[fieldDesc]  # remove PKUID Field

if geometry:
    fields.insert(0, "Geometry %s" % geometry)

# Create new table in DB
fields = ','.join(fields)
if len(fields) > 0:
    fields = ', %s' % fields
header, data = executeQuery("""CREATE TABLE "%s" ( PKUID INTEGER PRIMARY KEY AUTOINCREMENT %s )""" 
                            % (tableName, fields))
# if queryPb:
#    return

# Recover Geometry Column:
if geometry:
    header, data = executeQuery("""SELECT RecoverGeometryColumn("%s",'Geometry',%s,'%s',2)""" 
                                % (tableName, srid, geometry))

# Recall every feature
for feat in layer.getFeatures():
    # Selected features:
    if selected and feat.id()not in selected:
        continue

# PKUID and Geometry
    autoValues = ['NULL']  # PKUID value
    if geometry:
        geom = feat.geometry()
        WKB = geom.asWkb()
        WKT = geom.exportToWkt()
        autoValues.append('CastToMulti(GeomFromText("%s",%s))' % (WKT, srid))

# Show all attributes and their values
    lostValues = []
    for val in allAttrib:  # All except PKUID
        lostValues.append(feat[val])

# Create line in DB table
    if len(fields) > 0:
        header, data = executeQuery("""INSERT INTO "%s" VALUES (%s,%s)""" 
                                    % (tableName, ','.join([unicode(value).encode('utf-8') for value in autoValues]), 
                                       ','.join('?'*len(lostValues))), tuple([unicode(value) for value in lostValues]))
    else:  # no attribute Data
        header, data = executeQuery("""INSERT INTO "%s" VALUES (%s)""" 
                                    % (tableName, ','.join([unicode(value).encode('utf-8') for value in autoValues])))
